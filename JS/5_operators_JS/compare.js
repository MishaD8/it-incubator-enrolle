// Операторы сравнения

/*
Больше: a > b
Меньше: a < b
Больше или равно: a >= b
Меньше или равно: a <= b
Равно: a == b
Не равно: a != b
Строгое равно: a === b
Строгое не равно: a !== b
*/

//операторы сравнения возвращают логический тип данных
//со значением true или false:

console.log(2 > 1); // true
console.log(4 < 2); //false
console.log(58 == 36); //false
console.log(8 != 9); //true

//Присваиваем результат переменной 

const result = 11 > 10;
console.log(result); //true

//Сравнение строк

//Алфавитный порядок
console.log('Б' > 'А'); //true

//Алфавитный порядок 
console.log('Скрипт' > 'Скрипка'); //true

//Кол-во символов 
console.log('Слайдер' > 'Слайд'); //true

//Регистр
console.log('Фрилансер' > 'фрилансер'); //false

/*
Алгоритм сравнения двух строк довольно прост:
1. Сначала сравнивается первые символы строк.
2. Если первый символ первой строки больше(меньше), чем первый символ второй, то первая 
строка больше (меньше) второй. Сравнение завершено.
3. Если первые символы равны, то таким же образом сравниваются уже вторые символы строк.
4. Сравнение продолжается, пока не закончится одна из строк.
5. Если обе строки заканчиваются одновременно, то они равны. Иначе, большей считается
    более длинная строка.
*/

// Сравнение разных типов 
// Преобразование в число
console.log('58' > 10); // true
console.log('007' == 7); // true

// Логическое значение true
// становится 1, а false - 0.
console.log(true == 1); // true
console.log(false == 0); //true

//Интересные ситуации 
const itemA = 0;
const itemB = "0";

console.log(Boolean(itemA)); //false
console.log(Boolean(itemB)); // true

console.log (itemA == itemB); //true

//Оператор строгого равенства или не равенства 
// проверяют равенство без приведения типов.

console.log( 0 === false); // false
console.log('007' === 7); //false
console.log('58' !== 58); //true

// Сравнение с null и undefined 
//Cтрогое равенство
console.log(null === undefined); //false

//Не строгое равенство
console.log(null == undefined); //true

//Сравнение null и 0
console.log(null > 0); //false
console.log(null == 0); //false
console.log(null >= 0); //true

//Сравнение undefined и 0 
console.log(undefined > 0); //false
console.log(undefined == 0); // false
console.log(undefined >= 0); // false

/*
Что бы избежать проблем при сравнении нужно подходить очень осторожно к 
любому сравнению с undefined / null, кроме случаев строгого равенства ===.
Не использовать сравнения >= ; > ; < ; <= ; с переменными, которые 
могут принимать значения null / undefined, разве что ты точно знаешь что делаешь.
В любом случае, если переменная может принимать эти значения, то стоит добавить
для них отдельные проверки.
*/

// Логические операторы 

// Оператор || (ИЛИ)

/*
Оператор ИЛИ, записывается как две вертикальные черты. 
Процесс его работы следующий:
1. Вычисляет операнды слева направо. 
2. Каждый операнд конвертирует в логическое значение. Если результат true, останавливается 
    и возвращает исходное значение этого операнда.
3. Если все операнды являются ложными(false), возвращает значение последнего из них.
*/

// Булевые значения
console.log(true || true); // true
console.log(false || true); // true
console.log(true || false);// true
console.log(false || false); // false

//Разные типы 

//Первый true это 1
console.log(1 || 0); //1
//Первый true это true
console.log(true || 'фрилансер'); //true
//Первый true это 58
console.log(null || 58); //58
//Первый true это фрилансер
console.log(null || 'фрилансер' || 0); //фрилансер
//true нет совсем, вернет последнее значение - 0
console.log(undefined || '' || null || 0); // 0

//Присвоение значения в переменную

const userName = '';
const userNickName = 'Antonia';

const user = userName || userNickName || "Jack";
console.log(user); //

//Сокращенное вычисление. Условие.
let admins = 0;
let users = 5;
admins > users || users++;
console.log(users); //6

//Оператор && (И)
/*
Следующий логический оператор это И. Пишется как два амперсанда && выполняет следующие
действия:
1. Вычисляет операнды слева направо:
2. Каждый операнд преобразует в логическое значение.
    Если результат false, останавливается и возвращает исходное значение этого операнда.
3. Если все операнды были истинными, возвращает значение последнего.
*/
// Булевые значения
console.log(true && true); // true
console.log(false && true); // false
console.log(true && false); // false
console.log(false && false); // false

//Разные типы

// Пример 1. 0 - false
console.log('Antonia' && 0 && 2 && 3); // 0
//Пример 2. null - false
console.log(1 && 2 && null && 3); // null
//Пример 3. Все true
console.log('15' && '42'); //42

//Приоритет && больше чем ||
console.log(1 && 0 || 2 && 1); //1

//Подобие условия 
const users1 = 1;
//(users1 > 0) && console.log(`Пользователей` ${users1}); //Пользователей 1 (непонятная ошибка в этой строке)

//Оператор ! (НЕ)

/*
Выполняет следующие действия:
1.Сначала приводит аргумент к логическому типу true / false.
2. Затем возвращает противоположное значение.
*/
//Булевые значения
console.log(!true); //false

//Разные типы
console.log(!null); //true
console.log(!1); //false
console.log(!''); // true
console.log(!'Antonia'); // false
/*
Приоритет НЕ ! является наивысшим из всех логических операторов,
поэтому он всегда выполняется первым, перед && или ||.
*/
console.log(!true && 58 || 18 && !1); //false

//Используется для преобразования типа в boolean
console.log(!!'Antonia'); // true
//или
console.log(Boolean('Antonia')); //true

//Оператор объединения с null (??)

/*
Оператор ?? возвращает первый аргумент, если он не null / undefined, 
иначе второй.
*/
let name1;
console.log(name1 ?? 'без имени'); //без имени